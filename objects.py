# Standard Imports
from typing import Union

# Third Party Imports
from huggingface_hub.inference._generated.types import (
    ChatCompletionInputGrammarType,
    ChatCompletionInputToolType,
    ToolElement
)
from pydantic import BaseModel, Field


MODEL_DESCRIPTION = """The model to use for chat-completion. Can be a model ID hosted on the Hugging Face Hub or a URL to a deployed
Inference Endpoint. If not provided, the default recommended model for chat-based text-generation will be used.
See https://huggingface.co/tasks/text-generation for more details.

If `model` is a model ID, it is passed to the server as the `model` parameter. If you want to define a
custom URL while setting `model` in the request payload, you must set `base_url` when initializing [`InferenceClient`].
"""
FREQUENCY_PENALTY_DESCRIPTION = """Penalizes new tokens based on their existing frequency
in the text so far. Range: [-2.0, 2.0].
"""

MAX_TOKENS_DESCRIPTION = """Maximum number of tokens allowed in the response."""

PRESENCE_PENALTY_DESCRIPTION = """Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the
text so far, increasing the model's likelihood to talk about new topics.
"""

TOOLS_DESCRIPTION = """A list of tools the model may call. Currently, only functions are supported as a tool. Use this to
provide a list of functions the model may generate JSON inputs for.
"""

TOOLS_LOGPROBS_DESCRIPTION = """An integer between 0 and 5 specifying the number of most likely tokens to return at each token
position, each with an associated log probability. logprobs must be set to true if this parameter is
used.
"""

LOGIT_BIAS_DESCRIPTION = """Modify the likelihood of specified tokens appearing in the completion. Accepts a JSON object that maps tokens
(specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically,
the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model,
but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should
result in a ban or exclusive selection of the relevant token. Defaults to None.
"""

LOG_PROBS_DESCRIPTION = """Whether to return log probabilities of the output tokens or not. If true, returns the log
probabilities of each output token returned in the content of message.
"""


class TGIChatCompletionArgs(BaseModel):
    messages: list[dict]
    model: str | None = Field(description=MODEL_DESCRIPTION, default=None)
    frequency_penalty: float | None = Field(description=FREQUENCY_PENALTY_DESCRIPTION, default=None)
    logit_bias: list[float] | None = Field(description=LOGIT_BIAS_DESCRIPTION, default=None)
    logprobs: bool | None = Field(description=LOG_PROBS_DESCRIPTION, default=None)
    max_tokens: int | None = Field(description=MAX_TOKENS_DESCRIPTION, default=None)
    presence_penalty: float | None = Field(description=PRESENCE_PENALTY_DESCRIPTION, default=None)
    response_format: ChatCompletionInputGrammarType | None = Field(description="Grammar constraints. Can be either a JSONSchema or a regex.", default=None)
    seed: int | None = Field(description="Seed for reproducible control flow", default=None)
    temperature: float | None = Field(description="Controls randomness of the generations. Lower values ensure less random completions", default=None)
    top_logprobs: int | None = Field(description=TOOLS_LOGPROBS_DESCRIPTION, default=None)
    top_p: float | None = Field(description="Fraction of the most likely next words to sample from. Must be between 0 and 1.", default=None)
    tool_choice: Union[ChatCompletionInputToolType, str] | None = Field(description="The tool to use for the completion", default=None)
    tool_prompt: str | None = Field(description="A prompt to be appended before the tools.", default=None)
    tools: list[ToolElement] | None = Field(description=TOOLS_DESCRIPTION, default=None)


class QueueResponse(BaseModel):
    error_code: int = Field(description="Error code for the request", default=200)
    message: str = Field(description="The response message")
